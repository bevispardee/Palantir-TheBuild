<?xml version="1.0"?>

<!--
  @file artifacts.xml
  Targets for managing Drupal code artifacts.

  Copyright 2016 Palantir.net, Inc.
  -->

<project name="artifacts" default="status">


    <target name="status">
        <echo>Hello world.</echo>
    </target>


    <!--
        Target: run-composer-elsewhere

        This is a bad idea but also since it doesn't use the developer's local
        code/files maybe it is a good idea.
        -->
    <target name="run-composer-elsewhere">
        <fail unless="install_dir" />
        <fail unless="build.dir" />
        <fail unless="drupal.root" />
        <fail unless="drupal.sites_subdir" />

        <!-- Relative path to the Drupal root within the install dir -->
        <property name="drupal.root_name" value="docroot/" />
        <!-- Path where the conf dir should be copied -->
        <property name="install_conf_dir" refid="install_dir" />

        <!-- Remove all the existing files so that we can install cleanly. -->
        <delete includeemptydirs="true" failonerror="true">
            <fileset dir="${install_dir}" />
        </delete>

        <!--
            copy the composer files to the build directory so that we can get
            all of the prod dependencies there.
            -->
        <copy todir="${install_dir}" overwrite="true" haltonerror="true">
            <fileset dir="${build.dir}">
                <include name="composer.json" />
                <include name="composer.lock" />
            </fileset>
            <!--
                the composer file has the drupal root hard coded into it, and
                this is a gross workaround. unfortunately when the drupal root
                is different on different environments, I think composer needs
                to know about it in order to generate the autoloader stuff.
                -->
            <filterchain>
                <replaceregexp>
                    <regexp pattern="web/([^\]]+type:drupal-)" replace="${drupal.root_name}\1" />
                </replaceregexp>
            </filterchain>
        </copy>

        <!--
            also, we need to manually copy the custom code into the artifact.
            doing it based on what is checked in to git prevents us from
            accidentally adding local files or settings.php in to the
            build repository.

            AND, drupal has applied permissions to the sites directory that
            prevent us from writing to it, so we need to squash them.
            -->
        <exec command="chmod 777 web/sites/${drupal.sites_subdir}" dir="${build.dir}" />
        <tempfile property="tmpfile" destdir="${build.dir}/artifacts" />
        <exec command="git ls-files" dir="${build.dir}/web" output="${tmpfile}" />
        <copy todir="${drupal.root}" overwrite="true" haltonerror="true">
            <filelist dir="${build.dir}/web" listfile="${tmpfile}" />
        </copy>
        <delete file="${tmpfile}" />

        <!--
            AND we need to copy the config.
            -->
        <tempfile property="tmpfile" destdir="${build.dir}/artifacts" />
        <exec command="git ls-files conf" dir="${build.dir}" output="${tmpfile}" />
        <copy todir="${install_conf_dir}" overwrite="true" haltonerror="true">
            <filelist dir="${build.dir}" listfile="${tmpfile}" />
        </copy>
        <delete file="${tmpfile}" />
        
        <!--
            AND we need to copy the top level /drush directory
            -->
        <tempfile property="tmpfile" destdir="${build.dir}/artifacts" />
        <exec command="git ls-files drush" dir="${build.dir}" output="${tmpfile}" />
        <copy todir="${install_dir}" overwrite="true" haltonerror="true">
            <filelist dir="${build.dir}" listfile="${tmpfile}" />
        </copy>
        <delete file="${tmpfile}" />

        <!--
            then we composer install in the build dir...
            -->
        <exec command="composer install --no-dev --no-interaction" dir="${install_dir}" returnproperty="composer_return" outputproperty="composer_output" />
        <if>
            <not><equals arg1="${composer_return}" arg2="0" /></not>
            <then>
                <echo>${composer_output}</echo>
                <fail msg="Composer install failed." />
            </then>
        </if>


        <!--
            remove all composer dev dependencies so external scripts (e.g.
            Acquia RA) and absent-minded manual artifact editors (ahem) don't
            include dev dependencies in the build artifact.

            note that dev dependencies that are a dependency of another package
            will not be removed.
            -->
        <!-- the install dir will have just the prod dependencies -->
        <tempfile property="tmpfile_composer_prod" destdir="${build.dir}/artifacts" />
        <exec command="composer show --name-only --direct" dir="${install_dir}" output="${tmpfile_composer_prod}" />

        <!-- the build dir will have both dev and prod dependencies installed -->
        <tempfile property="tmpfile_composer_dev" destdir="${build.dir}/artifacts" />
        <exec command="composer show --name-only --direct" dir="${build.dir}" output="${tmpfile_composer_dev}" />

        <!-- diff the two sets of dependencies, outputting only the ones in dev but not in prod -->
        <exec command="diff --new-line-format='' --unchanged-line-format='' ${tmpfile_composer_dev} ${tmpfile_composer_prod} | xargs" outputProperty="composer_remove" />
        <!-- use composer to remove all of the dev dependencies from the composer.json -->
        <exec command="composer remove ${composer_remove} --dev --update-no-dev --no-interaction" dir="${install_dir}" />
        <exec command="composer install --no-dev --no-interaction" dir="${install_dir}" />
        <!-- now clean up those temporary files -->
        <delete file="${tmpfile_composer_prod}" />
        <delete file="${tmpfile_composer_dev}" />


        <!--
            having git repositories in the vendor dir messes up the build
            artifact, since the entire vendor dir gets checked in to the
            artifact and git will automatically try to do submodules for git
            directories like this. so we strip them.
            -->
        <delete includeemptydirs="true">
            <fileset dir="${install_dir}" defaultexcludes="false">
                <include name="*/**/.git/**" />
                <include name="*/**/.git" />
            </fileset>
        </delete>
    </target>


    <!--
        Target: include-resource

        Link or copy a resource. Pass in the ${build.artifact_mode} as
        ${artifact_mode}.
        -->
    <target name="include-resource">
        <fail unless="artifact_mode" />
        <fail unless="resource_source" />
        <fail unless="resource_dest" />

        <echo>This target is deprecated. Please use &lt;includeresource mode="${artifact_mode}" source="${resource_source}" dest="${resource_dest}" /&gt; now.</echo>
        <includeresource mode="${artifact_mode}" source="${resource_source}" dest="${resource_dest}" />
    </target>


</project>
